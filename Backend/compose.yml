name: microservices-architecture
services:
  orders-command:
    build:
      context: ./orders-command
      dockerfile: Containerfile
    container_name: orders-command
    ports:
      - "3001:3000"
    environment:
      - KAFKA_BROKER=kafka:9092
      - DB_HOST=orders-db
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=orders
    depends_on:
      - kafka
      - orders-db
    networks:
      - backend
    # command: >
    #   sh -c "
    #     npm run typeorm migration:run &&
    #     node dist/main
    #   "
  

  orders-query:
    build:
      context: ./orders-query
      dockerfile: Containerfile
    container_name: orders-query
    ports:
      - "3002:3000"
    environment:
      - KAFKA_BROKER=kafka:9092
      - DB_HOST=orders-query-db
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_NAME=orders_query
    depends_on:
      - kafka
      - orders-query-db
    networks:
      - backend

  returns:
    build:
      context: ./returns
      dockerfile: Containerfile
    container_name: returns
    ports:
      - "3003:3000"
    environment:
      - KAFKA_BROKER=kafka:9092
      - DB_HOST=returns-db
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_NAME=returns
    depends_on:
      - kafka
      - returns-db
    networks:
      - backend

  notifs:
    build:
      context: ./notifs
      dockerfile: Containerfile
    container_name: notifs
    ports:
      - "3004:3000"
    environment:
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - kafka
    networks:
      - backend

  # Bases de datos por servicio (CQRS y Returns)
  orders-db:
    image: postgres:16
    container_name: orders-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    ports:
      - "5433:5432"
    networks:
      - backend

  orders-query-db:
    image: postgres:16
    container_name: orders-query-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders_query
    ports:
      - "5434:5432"
    networks:
      - backend

  returns-db:
    image: postgres:16
    container_name: returns-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: returns
    ports:
      - "5435:5432"
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.3.3
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend
    

networks:
  backend:
    driver: bridge

